services:
  # Backend Service
  backend:
    # Use the Dockerfile located in your apps/backend directory
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile

    ports:
      - ${API_PORT_LOCAL}:${API_PORT_DOCKER}

    environment:
      NODE_ENV: development
        - API_PORT_LOCAL=${API_PORT_LOCAL}
        - API_PORT_DOCKER=${API_PORT_DOCKER}
    volumes:
      - ./apps/backend:/app/apps/backend
      - /app/node_modules
    # Optional: Define a health check for the backend service
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health'] # Adjust endpoint as needed
      interval: 30s
      timeout: 10s
      retries: 3
    # Specify the command to run when the container starts
    # This typically uses nodemon for hot-reloading during development
    command: sh -c "cd /app && pnpm --filter ./apps/backend run dev"
    stop_signal: SIGINT
  storage:
    build:
      context: .
      dockerfile: ./apps/storage/Dockerfile
    depends_on:
      mongo-storage:
        condition: service_healthy
    environment:
      - MONGO_URI=${MONGODB_URI}
    ports:
      - ${STORAGE_LOCAL_PORT}:${STORAGE_DOCKER_PORT}
  mongo-storage:
    build:
      context: .
      dockerfile: ./apps/mongo-storage/Dockerfile
    volumes:
      - mongo-data:/data/db
    ports:
      - ${MONGODB_LOCAL_PORT}:${MONGODB_DOCKER_PORT}
      - '27017:27017'
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.runCommand('ping').ok", '--quiet']
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service (Placeholder)
  # Uncomment and configure this service once you have a frontend application
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: apps/frontend/Dockerfile # Assuming your frontend Dockerfile is here
  #   # Map the frontend port (e.g., 80 for a web server)
  #   ports:
  #     - "80:80" # Or your frontend development server port (e.g., 3001)
  #   volumes:
  #     # Mount the frontend source code for development
  #     - ./apps/frontend:/app/apps/frontend
  #     - /app/node_modules # Prevent host node_modules interference
  #   # Command to run the frontend development server
  #   # command: pnpm --filter ./apps/frontend run dev # Adjust script name

  # Example of a Database Service (Optional)
  # Uncomment and configure if your application uses a database
  # db:
  #   image: postgres:13-alpine # Or another database image
  #   ports:
  #     - "5432:5432" # Map the database port
  #   environment:
  #     POSTGRES_USER: myuser
  #     POSTGRES_PASSWORD: mypassword
  #     POSTGRES_DB: mydatabase
  #   volumes:
  #     # Persist database data to a named volume
  #     - db_data:/var/lib/postgresql/data
  #   # Optional: Health check for the database
  #   healthcheck:
  #     test: ["CMD-HEALHCHECK", "pg_isready", "-U", "myuser"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
# Define named volumes for persistent data (if needed)

volumes:
  mongo-data:
